// Copyright 2017 Larry Gritz (et al)
// MIT open source license, see the LICENSE file of this distribution
// or https://opensource.org/licenses/MIT


#pragma once

/// \file
/// Macros necessary for proper symbol export from dynamic libraries.


///
/// On Windows, when compiling code that will end up in a DLL, symbols
/// must be marked as 'exported' (i.e. __declspec(dllexport)) or they
/// won't be visible to programs linking against the DLL.
///
/// In addition, when compiling the application code that calls the DLL,
/// if a routine is marked as 'imported' (i.e. __declspec(dllimport)),
/// the compiler can be smart about eliminating a level of calling
/// indirection.  But you DON'T want to use __declspec(dllimport) when
/// calling a function from within its own DLL (it will still compile
/// correctly, just not with maximal efficiency).  Which is quite the
/// dilemma since the same header file is used by both the library and
/// its clients.  Sheesh!
///
/// But on Linux/OSX as well, we want to only have the DSO export the
/// symbols we designate as the public interface.  So we link with
/// -fvisibility=hidden to default to hiding the symbols.  See
/// http://gcc.gnu.org/wiki/Visibility
///
/// We solve this awful mess by defining these macros:
///
/// @PROJECT_NAME@_API - used for the @PROJECT_NAME@ public API.  Normally, assumes
///               that it's being seen by a client of the library, and
///               therefore declare as 'imported'.  But if
///               @PROJECT_NAME@_EXPORT is defined (as is done by CMake
///               when compiling the library itself), change the
///               declaration to 'exported'.
/// @PROJECT_NAME@_EXPORT - explicitly exports a symbol that isn't part of the
///               public API but still needs to be visible.
/// @PROJECT_NAME@_LOCAL -  explicitly hides a symbol that might otherwise be
///               exported
///

#if defined(_MSC_VER) || defined(__CYGWIN__)
  #ifndef @PROJECT_NAME@_STATIC_BUILD
    #define @PROJECT_NAME@_IMPORT __declspec(dllimport)
    #define @PROJECT_NAME@_EXPORT __declspec(dllexport)
  #else
    #define @PROJECT_NAME@_IMPORT
    #define @PROJECT_NAME@_EXPORT
  #endif
  #define @PROJECT_NAME@_LOCAL
#else
  #define @PROJECT_NAME@_IMPORT __attribute__ ((visibility ("default")))
  #define @PROJECT_NAME@_EXPORT __attribute__ ((visibility ("default")))
  #define @PROJECT_NAME@_LOCAL  __attribute__ ((visibility ("hidden")))
#endif

#if defined(@PROJECT_NAME@_EXPORTS)
#  define @PROJECT_NAME@_API @PROJECT_NAME@_EXPORT
#else
#  define @PROJECT_NAME@_API @PROJECT_NAME@_IMPORT
#endif
