# Copyright Contributors to the Proto project.
# SPDX-License-Identifier: BSD-3-Clause
# https://github.com/lgritz/proto-project

name: CI

on:
  push:
    # Skip jobs when only documentation files are changed
    paths-ignore:
      - '**.md'
      - '**.rst'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
  # schedule:
  #   # Full nightly build
  #   - cron: "0 8 * * *"


jobs:

  aswf:
    name: "VFX${{matrix.vfxyear}} ${{matrix.desc}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - desc: gcc11/C++17 py3.10 boost1.80 exr3.1 ocio2.2
            nametag: linux-vfx2023
            runner: ubuntu-latest
            container: aswftesting/ci-osl:2023-clang15
            vfxyear: 2023
            cxx_std: 17
            python_ver: "3.10"
            simd: "avx2,f16c"
            fmt_ver: 10.1.1
            pybind11_ver: v2.10.0
          - desc: gcc11/C++17 py3.11 boost1.82 exr3.2 ocio2.3
            nametag: linux-vfx2024
            runner: ubuntu-latest
            container: aswftesting/ci-osl:2024-clang17
            vfxyear: 2024
            cxx_std: 17
            python_ver: "3.11"
            simd: "avx2,f16c"
            fmt_ver: 10.1.1
            pybind11_ver: v2.10.0

    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.container }}
    env:
      CXX: ${{matrix.cxx_compiler}}
      CC: ${{matrix.cc_compiler}}
      CMAKE_CXX_STANDARD: ${{matrix.cxx_std}}
      USE_SIMD: ${{matrix.simd}}
      FMT_VERSION: ${{matrix.fmt_ver}}
      OPENEXR_VERSION: ${{matrix.openexr_ver}}
      PYBIND11_VERSION: ${{matrix.pybind11_ver}}
      PYTHON_VERSION: ${{matrix.python_ver}}
      ABI_CHECK: ${{matrix.abi_check}}
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        # Note: can't upgrade to actions/checkout 4.0 because it needs newer
        # glibc than these containers have.
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: echo "date=`date -u +'%Y-%m-%dT%H:%M:%SZ'`" >> $GITHUB_OUTPUT
      - name: ccache
        id: ccache
        uses: actions/cache@e12d46a63a90f2fae62d114769bbf2a179198b5c # v3.3.3
        # Note: can't upgrade to actions/cache 4.0 because it needs newer
        # glibc than these containers have.
        with:
          path: /tmp/ccache
          key: ${{github.job}}-${{matrix.nametag}}-${{steps.ccache_cache_keys.outputs.date}}
          restore-keys: ${{github.job}}-
      - name: Build setup
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            ${{matrix.depcmds}}
            src/build-scripts/gh-installdeps.bash
      - name: Build
        run: src/build-scripts/ci-build.bash
      - name: Testsuite
        if: matrix.skip_tests != '1'
        run: src/build-scripts/ci-test.bash
      # - name: Check out ABI standard
      #   if: matrix.abi_check != ''
      #   uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      #   with:
      #     ref: ${{matrix.abi_check}}
      #     path: abi_standard
      # - name: Build ABI standard
      #   if: matrix.abi_check != ''
      #   run: |
      #       mkdir -p abi_standard/build
      #       pushd abi_standard
      #       src/build-scripts/ci-build.bash
      #       popd
      # - name: Check ABI
      #   if: matrix.abi_check != ''
      #   run: |
      #       src/build-scripts/ci-abicheck.bash ./build abi_standard/build libOpenImageIO libOpenImageIO_Util
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: failure()
        with:
          name: oiio-${{github.job}}-${{matrix.nametag}}
          path: |
            build/cmake-save
            build/compat_reports
            build/testsuite/*/*.*




  vfxplatform-2021:
    # Test what's anticipated to be VFX Platform 2021 -- mainly, that means
    # gcc9 and C++17.
    name: "Linux VFX Platform 2021: gcc9/C++17 py3.7 boost-1.70 exr-2.5"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2021
    env:
      CXX: g++
      CC: gcc
      CMAKE_CXX_STANDARD: 17
      PYTHON_VERSION: 3.7
      USE_SIMD: avx2,f16c
    steps:
      - uses: actions/checkout@v2
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: |
          echo "::set-output name=date::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
      - name: ccache
        id: ccache
        uses: actions/cache@v2
        with:
          path: /tmp/ccache
          key: ${{ github.job }}-${{ steps.ccache_cache_keys.outputs.date }}
          restore-keys: |
            ${{ github.job }}-
      - name: setup
        run: |
            src/build-scripts/ci-startup.bash
      - name: dependencies
        run: |
            src/build-scripts/gh-installdeps.bash
      - name: Build
        run: |
            src/build-scripts/ci-build.bash
      - name: Testsuite
        run: |
            src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: |
            build/*/testsuite/*/*.*
            build/*/CMake*.{txt,log}

  linux-latest-releases:
    # Test against latest supported releases of toolchain and dependencies.
    name: "Linux latest releases: gcc10 C++17 avx2 exr2.5"
    runs-on: ubuntu-18.04
    env:
      CXX: g++-10
      CMAKE_CXX_STANDARD: 17
      USE_SIMD: avx2,f16c
      OPENEXR_VERSION: master
      OPENIMAGEIO_VERSION: master
      PYBIND11_VERSION: v2.6.2
      # PYBIND11_VERSION: master
      MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=master
    steps:
      - uses: actions/checkout@v2
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: |
          echo "::set-output name=date::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
      - name: ccache
        id: ccache
        uses: actions/cache@v2
        with:
          path: /tmp/ccache
          key: ${{ github.job }}-${{ steps.ccache_cache_keys.outputs.date }}
          restore-keys: |
            ${{ github.job }}-
      - name: setup
        run: |
            src/build-scripts/ci-startup.bash
      - name: dependencies
        run: |
            src/build-scripts/gh-installdeps.bash
      - name: Build
        run: |
            src/build-scripts/ci-build.bash
      - name: Testsuite
        run: |
            src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: |
            build/*/testsuite/*/*.*
            build/*/CMake*.{txt,log}

  macos-py38:
    name: "Mac py38"
    runs-on: macOS-latest
    env:
      CXX: clang++
      PYTHON_VERSION: 3.8
      CMAKE_CXX_STANDARD: 14
      ENABLE_FIELD3D: OFF
    steps:
      - uses: actions/checkout@v2
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: |
          echo "::set-output name=date::`date -u +'%Y-%m-%dT%H:%M:%SZ'`"
      - name: ccache
        id: ccache
        uses: actions/cache@v2
        with:
          path: /Users/runner/.ccache
          key: ${{ github.job }}-${{ steps.ccache_cache_keys.outputs.date }}
          restore-keys: |
            ${{ github.job }}-
      - name: Build setup
        run: |
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            src/build-scripts/install_homebrew_deps.bash
            brew install --display-times -q openimageio
      - name: Build
        run: |
            export PYTHONPATH=/usr/local/lib/python${PYTHON_VERSION}/site-packages:$PYTHONPATH
            src/build-scripts/ci-build.bash
      - name: Testsuite
        run: |
            src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: |
            build/*/testsuite/*/*.*
            build/*/CMake*.{txt,log}

  windows-vs2019:
    name: "Windows VS2019"
    runs-on: windows-2019
    env:
      PYTHON_VERSION: 3.7
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      OPENEXR_VERSION: v2.5.5
      OIIO_CTEST_FLAGS: "--timeout 120 --repeat after-timeout:5"
    steps:
      - uses: actions/checkout@v2
      - name: Setup Nuget.exe
        uses: nuget/setup-nuget@v1
      - name: Build setup
        shell: bash
        run: |
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        shell: bash
        run: |
            src/build-scripts/gh-win-installdeps.bash
      - name: Build
        shell: bash
        run: |
            src/build-scripts/ci-build.bash
      - name: Testsuite
        shell: bash
        run: |
            src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: |
            build/*/testsuite/*/*.*
            build/*/CMake*.{txt,log}

  clang-format:
    # Test formatting. This test entry doesn't do a full build, it just runs
    # clang-format on everything, and passes if nothing is misformatted.
    # Upon failure, the build artifact will be the full source code with the
    # formatting fixed (diffs will also appear in the console output).
    name: "clang-format verification"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2021-clang10
    env:
      BUILDTARGET: clang-format
      PYTHON_VERSION: 3.7
    steps:
      - uses: actions/checkout@v2
      - name: Build setup
        run: |
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            src/build-scripts/gh-installdeps.bash
      - name: Build
        run: |
            src/build-scripts/ci-build.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: src/*/*.{cpp,h}
