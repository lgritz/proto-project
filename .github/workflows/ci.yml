# Copyright Contributors to the Proto project.
# SPDX-License-Identifier: BSD-3-Clause
# https://github.com/lgritz/proto-project

name: CI

on:
  push:
    # Skip jobs when only documentation files are changed
    paths-ignore:
      - '**.md'
      - '**.rst'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
  # schedule:
  #   # Full nightly build
  #   - cron: "0 8 * * *"


jobs:

  aswf:
    name: "VFX${{matrix.vfxyear}} ${{matrix.desc}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - desc: gcc11/C++17 py3.10 boost1.80 exr3.1 ocio2.2
            nametag: linux-vfx2023
            runner: ubuntu-latest
            container: aswftesting/ci-osl:2023-clang15
            vfxyear: 2023
            cxx_std: 17
            python_ver: "3.10"
            simd: "avx2,f16c"
            fmt_ver: 10.1.1
            pybind11_ver: v2.10.0
          - desc: gcc11/C++17 py3.11 boost1.82 exr3.2 ocio2.3
            nametag: linux-vfx2024
            runner: ubuntu-latest
            container: aswftesting/ci-osl:2024-clang17
            vfxyear: 2024
            cxx_std: 17
            python_ver: "3.11"
            simd: "avx2,f16c"
            fmt_ver: 10.1.1
            pybind11_ver: v2.10.0

    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.container }}
    env:
      CXX: ${{matrix.cxx_compiler}}
      CC: ${{matrix.cc_compiler}}
      CMAKE_CXX_STANDARD: ${{matrix.cxx_std}}
      USE_SIMD: ${{matrix.simd}}
      FMT_VERSION: ${{matrix.fmt_ver}}
      OPENEXR_VERSION: ${{matrix.openexr_ver}}
      OPENIMAGEIO_VERSION: ${{matrix.openimageio_ver}}
      PYBIND11_VERSION: ${{matrix.pybind11_ver}}
      PYTHON_VERSION: ${{matrix.python_ver}}
      ABI_CHECK: ${{matrix.abi_check}}
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        # Note: can't upgrade to actions/checkout 4.0 because it needs newer
        # glibc than these containers have.
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: echo "date=`date -u +'%Y-%m-%dT%H:%M:%SZ'`" >> $GITHUB_OUTPUT
      - name: ccache
        id: ccache
        uses: actions/cache@e12d46a63a90f2fae62d114769bbf2a179198b5c # v3.3.3
        # Note: can't upgrade to actions/cache 4.0 because it needs newer
        # glibc than these containers have.
        with:
          path: /tmp/ccache
          key: ${{github.job}}-${{matrix.nametag}}-${{steps.ccache_cache_keys.outputs.date}}
          restore-keys: ${{github.job}}-
      - name: Build setup
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            ${{matrix.depcmds}}
            src/build-scripts/gh-installdeps.bash
      - name: Build
        run: src/build-scripts/ci-build.bash
      - name: Testsuite
        if: matrix.skip_tests != '1'
        run: src/build-scripts/ci-test.bash
      - name: Check out ABI standard
        if: matrix.abi_check != ''
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{matrix.abi_check}}
          path: abi_standard
      - name: Build ABI standard
        if: matrix.abi_check != ''
        run: |
            mkdir -p abi_standard/build
            pushd abi_standard
            src/build-scripts/ci-build.bash
            popd
      - name: Check ABI
        if: matrix.abi_check != ''
        run: |
            src/build-scripts/ci-abicheck.bash ./build abi_standard/build libOpenImageIO libOpenImageIO_Util
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: failure()
        with:
          name: oiio-${{github.job}}-${{matrix.nametag}}
          path: |
            build/cmake-save
            build/compat_reports
            build/testsuite/*/*.*


  ubuntu:
    name: "Ubuntu ${{matrix.desc}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - desc: latest releases gcc12 C++17 avx2 exr3.2 ocio2.3
            nametag: linux-latest-releases
            runner: ubuntu-22.04
            cc_compiler: gcc-12
            cxx_compiler: g++-12
            cxx_std: 17
            fmt_ver: 10.1.1
            openexr_ver: v3.2.1
            openimageio_ver: release
            pybind11_ver: v2.11.1
            python_ver: "3.10"
            simd: avx2,f16c
            setenvs: export OPENCOLORIO_VERSION=v2.3.2
                            PUGIXML_VERSION=v1.14
                            USE_OPENVDB=0
                            # The installed OpenVDB has a TLS conflict with Python 3.8
          - desc: bleeding edge gcc13 C++20 py3.10 OCIO/libtiff/exr-master boost1.74 avx2
            nametag: linux-bleeding-edge
            runner: ubuntu-22.04
            cc_compiler: gcc-13
            cxx_compiler: g++-13
            cxx_std: 20
            fmt_ver: master
            openexr_ver: main
            openimageio_version: master
            pybind11_ver: master
            python_ver: "3.10"
            simd: avx2,f16c
            setenvs: export OPENCOLORIO_VERSION=main
                            PUGIXML_VERSION=master
                            OIIO_CMAKE_FLAGS="-DFORTIFY_SOURCE=2"
                            # The installed OpenVDB has a TLS conflict with Python 3.8
            # Test formatting. This test entry doesn't do a full build, it
            # just runs clang-format on everything, and passes if nothing is
            # misformatted. Upon failure, the build artifact will be the full
            # source code with the formatting fixed (diffs will also appear in
            # the console output).
          - desc: "clang-format"
            nametag: clang-format
            runner: ubuntu-latest
            container: aswftesting/ci-osl:2022-clang14
            cxx_std: 17
            extra_artifacts: "src/*.*"
            openimageio_ver: release
            python_ver: "3.10"
            simd: avx2,f16c
            batched: b8_AVX2
            skip_tests: 1
            setenvs: export BUILDTARGET=clang-format
                            LLVM_VERSION=17.0.6
                            LLVM_DISTRO_NAME=ubuntu-22.04
                            OPENIMAGEIO_CMAKE_FLAGS=-DUSE_PYTHON=0
                            QT_VERSION=0

    runs-on: ${{ matrix.runner }}
    env:
      CXX: ${{matrix.cxx_compiler}}
      CC: ${{matrix.cc_compiler}}
      CMAKE_CXX_STANDARD: ${{matrix.cxx_std}}
      USE_SIMD: ${{matrix.simd}}
      FMT_VERSION: ${{matrix.fmt_ver}}
      OPENIMAGEIO_VERSION: ${{matrix.openimageio_ver}}
      OPENEXR_VERSION: ${{matrix.openexr_ver}}
      PYBIND11_VERSION: ${{matrix.pybind11_ver}}
      PYTHON_VERSION: ${{matrix.python_ver}}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: echo "date=`date -u +'%Y-%m-%dT%H:%M:%SZ'`" >> $GITHUB_OUTPUT
      - name: ccache
        id: ccache
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: /tmp/ccache
          key: ${{github.job}}-${{matrix.nametag}}-${{ steps.ccache_cache_keys.outputs.date }}
          restore-keys: ${{github.job}}-
      - name: Build setup
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            ${{matrix.depcmds}}
            src/build-scripts/gh-installdeps.bash
      - name: Build
        run: src/build-scripts/ci-build.bash
      - name: Testsuite
        if: matrix.skip_tests != '1'
        run: src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: failure()
        with:
          name: oiio-${{github.job}}-${{matrix.nametag}}
          path: |
            build/cmake-save
            build/testsuite/*/*.*
            ${{ matrix.extra_artifacts }}


  macrunner:
    name: "${{matrix.runner}} appleclang${{matrix.aclang}}/C++${{matrix.cxx_std}} py${{matrix.python_ver}} ${{matrix.desc}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - desc: MacOS-13
            runner: macos-13
            nametag: macos13-py311
            cxx_std: 17
            python_ver: "3.11"
            aclang: 14
          - desc: MacOS-14-ARM
            runner: macos-14
            nametag: macos14-arm-py311
            cxx_std: 20
            python_ver: "3.11"
            aclang: 15
    runs-on: ${{ matrix.runner }}
    env:
      CC: clang
      CXX: clang++
      CMAKE_CXX_STANDARD: ${{ matrix.cxx_std }}
      OPENIMAGEIO_VERSION: ${{matrix.openimageio_ver}}
      PYTHON_VERSION: ${{ matrix.python_ver }}
      CTEST_TEST_TIMEOUT: 600
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Prepare ccache timestamp
        id: ccache_cache_keys
        run: echo "date=`date -u +'%Y-%m-%dT%H:%M:%SZ'`" >> $GITHUB_OUTPUT
      - name: ccache
        id: ccache
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: /Users/runner/.ccache
          key: ${{github.job}}-${{matrix.nametag}}-${{ steps.ccache_cache_keys.outputs.date }}
          restore-keys: ${{github.job}}-
      - name: Build setup
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        run: |
            src/build-scripts/install_homebrew_deps.bash
            ${{matrix.depcmds}}
      - name: Build
        run: |
            export PYTHONPATH=/usr/local/lib/python${PYTHON_VERSION}/site-packages:$PYTHONPATH
            src/build-scripts/ci-build.bash
      - name: Testsuite
        run: src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: failure()
        with:
          name: oiio-${{github.job}}-${{matrix.nametag}}
          path: |
            build/cmake-save
            build/testsuite/*/*.*


  windows:
    name: "${{matrix.desc}} VS${{matrix.vsver}}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - desc: windows-2019
            runner: windows-2019
            vsver: 2019
            generator: "Visual Studio 16 2019"
            openexr_ver: v3.2.2
            python_ver: 3.7
            simd: sse4.2
          # - desc: windows-2022
          #   runner: windows-2022
          #   vsver: 2022
          #   generator: "Visual Studio 17 2022"
          #   openexr_ver: main
          #   # v3.1.4
          #   python_ver: 3.7
          #   simd: sse4.2
    runs-on: ${{ matrix.runner }}
    env:
      PYTHON_VERSION: ${{matrix.python_ver}}
      CMAKE_GENERATOR: ${{matrix.generator}}
      OPENEXR_VERSION: ${{matrix.openexr_ver}}
      OPENIMAGEIO_VERSION: ${{matrix.openimageio_ver}}
      USE_SIMD: ${{matrix.simd}}
      CTEST_ARGS: "--timeout 180 --repeat after-timeout:6"
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Setup Nuget.exe
        uses: nuget/setup-nuget@a21f25cd3998bf370fde17e3f1b4c12c175172f9 # v2.0.0
      - name: Build setup
        shell: bash
        run: |
            ${{matrix.setenvs}}
            src/build-scripts/ci-startup.bash
      - name: Dependencies
        shell: bash
        run: src/build-scripts/gh-win-installdeps.bash
      - name: Build
        shell: bash
        run: src/build-scripts/ci-build.bash
      - name: Testsuite
        shell: bash
        run: src/build-scripts/ci-test.bash
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: failure()
        with:
          name: oiio-${{github.job}}-VS${{matrix.vsver}}
          path: |
            build/cmake-save
            build/testsuite/*/*.*
