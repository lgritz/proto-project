# .travis.yml

language: cpp
sudo: false
osx_image: xcode7.3
dist: trusty


# Add-ons: specify apt packages for Linux
addons:
  apt:
   sources:
      - boost-latest
      - ubuntu-toolchain-r-test
      - george-edison55-precise-backports
      - sourceline: 'ppa:jonathonf/ffmpeg-3'
   packages:
      # - g++-6
      - g++-7
      - libboost-filesystem1.55
      - libboost-system1.55
      - libboost-thread1.55
      #- libgif-dev
      # - libtiff4-dev
      # - libopenjpeg-dev
      # - ffmpeg
      - libfreetype6-dev
      # - libjpeg-turbo8-dev


cache:
    ccache: true
    apt: true
    directories:
      - $HOME/.ccache

before_install:
    - if [ "$WHICHGCC" == "" ]; then export WHICHGCC="7" ; fi
    - if [ $TRAVIS_OS_NAME == osx ] ; then
          export PLATFORM=macosx ;
          sysctl machdep.cpu.features ;
      elif [ $TRAVIS_OS_NAME == linux ] ; then
          export PLATFORM=linux64 ;
          head -30 /proc/cpuinfo ;
      fi
    - export OIIOPLATFORM=$PLATFORM
    - if [ "$DEBUG" == 1 ] ; then export PLATFORM=${PLATFORM}.debug ; fi
    - echo "Build platform name is $PLATFORM"

install:
    - if [ "$CXX" == "g++" ]; then export CXX="g++-${WHICHGCC}" ; fi
    - export USE_CCACHE=1
    - export CCACHE_CPP2=1
    # Temporary fix: Use LG's private openexr branch, until the
    # fixes are merged into the OpenEXR project that will address
    # the warnings for gcc7 and C++17 compatibility.
    -   export EXRREPO=https://github.com/lgritz/openexr.git ;
    -   export EXRBRANCH=lg-cpp11 ;
    - if [ $TRAVIS_OS_NAME == osx ] ; then
          src/build-scripts/install_homebrew_deps.bash ;
      elif [ $TRAVIS_OS_NAME == linux ] ; then
          CXX="ccache $CXX" CCACHE_CPP2=1 src/build-scripts/build_openexr.bash ;
          export ILMBASE_HOME=$PWD/openexr-install ;
          export OPENEXR_HOME=$PWD/openexr-install ;
          export LD_LIBRARY_PATH=$OPENEXR_HOME/lib:$LD_LIBRARY_PATH ;
      fi
    - export OIIOMAKEFLAGS="$OIIOMAKEFLAGS -j2 DEBUG= USE_PYTHON=0 OIIO_BUILD_TESTS=0"
    - export OPENIMAGEIO_SITE=travis
    - export OSL_SITE=travis
    - src/build-scripts/build_openimageio.bash
    - export OPENIMAGEIOHOME=$PWD/OpenImageIO/dist/$OIIOPLATFORM
    - export PATH=$OPENIMAGEIOHOME/bin:$PATH
    - export DYLD_LIBRARY_PATH=$OPENIMAGEIOHOME/lib:$DYLD_LIBRARY_PATH
    - export LD_LIBRARY_PATH=$OPENIMAGEIOHOME/lib:$LD_LIBRARY_PATH
    - export PYTHONPATH=$OPENIMAGEIOHOME/python:$PYTHONPATH
    - export PATH=$OPENIMAGEIOHOME/bin:$PATH

# before_script:

script:
    - make VERBOSE=1 $BUILD_FLAGS cmakesetup
    - make -j2 $BUILD_FLAGS
    - ls -R dist
    - export LSAN_OPTIONS=suppressions=$PWD/src/build-scripts/nosanitize.txt
    - export PROJECTHOME=$PWD/dist/$PLATFORM
    - export DYLD_LIBRARY_PATH=$PROJECTHOME/lib:$DYLD_LIBRARY_PATH
    - export LD_LIBRARY_PATH=$PROJECTHOME/lib:$LD_LIBRARY_PATH
    - export PYTHONPATH=$PROJECTHOME/python:$PYTHONPATH
    - make $BUILD_FLAGS test


after_success:
    - if [ "$CODECOV" == 1 ]; then bash <(curl -s https://codecov.io/bash) ; fi

after_failure:
# FIXME: find failed logs, stash them or send them to lg?

branches:
  only:
    - master
    - /RB-/
    - /lg-/

matrix:
    fast_finish: true
    include:
    # test default compile: C++11, optimized, default compilers
      - os: linux
        compiler: gcc
      - os: osx
        compiler: clang
    # test debug build
      - os: linux
        compiler: gcc
        env: DEBUG=1
      # - os: osx
      #   compiler: clang
      #   env: DEBUG=1
    # test with C++14, most modern compiler
      # - os: osx
      #   compiler: clang
      #   env: USE_CPP=14
      - os: linux
        compiler: gcc
        env: USE_CPP=14 WHICHGCC=7
    # Build with sanitizers
      - os: linux
        compiler: gcc
        env: USE_CPP=14 WHICHGCC=7 SANITIZE=address USE_PYTHON=0



#notifications:
#    email:
#        recipients:
#        on_success: change
#        on_failure: always
